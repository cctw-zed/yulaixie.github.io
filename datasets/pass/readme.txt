PASS system intercepts related system calls to generate traceability information. When an event occurs, the corresponding system call is triggered. Thereby generating corresponding traceability information. This dataset distinguishes the same processes by version, ensuring that no dependency loops occur, eg. P.0->A->P.1. In addition to dependency properties (such as INPUT, GENERATEDBY, FORKPARENT, RECV, and SEND), the object's own properties (such as NAME, ENV, ARGV, PID, EXECTIME, and TYPE are also collected. INPUT, GENERATEDBY, FORKPARENT, RECV, and SEND represent the dependencies of objects. It does not make any sense to have a single object. What matters is the dependencies between the objects. Pass mainly records the dependencies between objects and objects. Where P->A, indicating that P depends on A.

The main three types of objects are collected: File object: The attributes include specific information about the file itself, such as file name, file storage space, storage location, and file node number. Process object: The attributes mainly contain the process name, the PID number of the process, and environment variables; the process creation time and related messages from the group may also covered when requirements given. Network connection object: it used to record the transmission of data on the network. Since many attacks are generated through the network, it is not enough to record objects such as files, processes, and pipes. Therefore, the system defines network connection objects to collect traceability information of files copied from the storage system. Network connection objects can be considered as file objects, the attributes of which include the source port, the destination port, the source IP address, and the destination IP address. 

The main three types of dependencies are collected: (1) FORKPARENT: Process to Process, if a process P creates process Q, the traceability record Q FORKPARENT P is generated, that is, Q->P. (2) INPUT: Process to File, if a process P reads the contents of the file A, the traceability record P INPUT A is generated, that is P->A. (3) GENERATEDBY: Network connection object to Process, if a process P sends data from the network connection object B, the traceability record B GENERATEDBY P is generated, that is, B->P.
